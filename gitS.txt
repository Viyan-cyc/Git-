Git的数据库分为远程数据库和本地数据库的两种。
1.远程数据库: 配有专用的服务器，为了多人共享而建立的数据库。
2.本地数据库: 为了方便用户个人使用，在自己的机器上配置的数据库。

创建本地数据库的方法有两种：
1.创建全新的数据库
2.复制远程数据库

在Git管理下，大家实际操作的目录被称为工作树。
在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域。

新建数据库:
mkdir file
cd file
git init
在新建的文件夹里放入要push的文件
git status(确认工作树和索引的状态)
git add cfile
git commit -m "说明"

push到远程数据库：
执行Push之后，本地的修改记录会被上传到远程数据库。
所以远程数据库的修改记录就会和本地数据库的修改记录保持同步。
git remote add <name/origin> <url>
git push -u origin master

克隆远程数据库：
执行克隆后，远程数据库的全部内容都会被下载。之后您在另一台机器的本地数据库上进行操作。
git clone <repository> <directory>

从远程数库pull：
进行拉取(Pull) 操作，就是从远程数据库下载最近的变更日志，并覆盖自己本地数据库的相关内容。

分支：
1.Merge
Merge分支是为了可以随时发布release而创建的分支，它还能作为Topic分支的源分支使用。保持分支稳定的状态是很重要的。如果要进行更改，通常先创建Topic分支，而针对该分支，可以使用Jenkins之类的CI工具进行自动化编译以及测试。

通常，大家会将master分支当作Merge分支使用。
2.Topic
Topic分支是为了开发新功能或修复Bug等任务而建立的分支。若要同时进行多个的任务，请创建多个的Topic分支。

Topic分支是从稳定的Merge分支创建的。完成作业后，要把Topic分支合并回Merge分支。

分支的切换：
若要切换作业的分支，就要进行checkout操作。进行checkout时，git会从工作树还原向目标分支提交的修改内容。checkout之后的提交记录将被追加到目标分支。
checkout检出，撤销

HEAD：(类比于指针，指向现在使用中的分支的最后一次更新)
通过移动过HEAD，可以变更使用的分支
HEAD后面加上~(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。

stash：
stash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。

还未提交的修改内容以及新添加的文件，留在索引区域或工作树的情况下切换到其他的分支时，修改内容会从原来的分支移动到目标分支。

但是如果在checkout的目标分支中相同的文件也有修改，checkout会失败的。这时要么先提交修改内容，要么用stash暂时保存修改内容后再checkout。